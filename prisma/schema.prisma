generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  fullName       String?
  googleId       String          @unique
  discordId      String?         @unique
  academicStatus AcademicStatus?
  discord        DiscordUser?    @relation(fields: [discordId], references: [id])
  google         GoogleUser      @relation(fields: [googleId], references: [id])
  sessions       Session[]
}

model GoogleUser {
  id          String   @id
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  displayName String
  email       String
  avatar      String?
  user        User?
}

model DiscordUser {
  id            String   @id
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  username      String
  discriminator String
  avatar        String?
  accessToken   String
  refreshToken  String
  Guild         Guild[]
  guildMembers  Member[]
  user          User?
}

model Member {
  id        String      @id @default(uuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  userId    String
  guildId   String
  guild     Guild       @relation(fields: [guildId], references: [id])
  user      DiscordUser @relation(fields: [userId], references: [id])
  roles     Role[]
}

model Role {
  id          String   @id
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  permissions String
  color       Int
  guildId     String
  guild       Guild    @relation(fields: [guildId], references: [id])
  members     Member[]
}

model Channel {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  guildId   String
  guild     Guild    @relation(fields: [guildId], references: [id])
}

model Guild {
  id        String      @id
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  name      String
  ownerId   String
  owner     DiscordUser @relation(fields: [ownerId], references: [id])
  channels  Channel[]
  members   Member[]
  roles     Role[]
}

model Subject {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  code      String
  courses   Course[]
}

model Course {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  title       String
  code        String
  description String
  subjectId   String
  subject     Subject      @relation(fields: [subjectId], references: [id])
  instructors Instructor[]
}

model Instructor {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  courses   Course[]
}

model Session {
  id     String  @id @default(uuid())
  data   String
  userId String?
  user   User?   @relation(fields: [userId], references: [id])
}

enum AcademicStatus {
  STUDENT
  ALUMNI
}
